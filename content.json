{"pages":[{"title":"about","text":"","link":"/about/index.html"}],"posts":[{"title":"安装Gitalk评论插件报403错误的解决办法","text":"1、设置前提首先在Github中Authorized OAuth Apps中的Homepage URL和Authorization callback URL要设置正确，本文是这2个值都一样，都是博客地址的首页地址，即：https://lzj09.github.io，注意协议http和https是严格区别的。 2、问题呈现当配置好Gitallk后，首次访问时，会有如下页面： 如果配置没错的话，首次出现这个页面是正确的，然后点击“使用 GitHub 登录”，登录授权后，如果出现403错误，即： 通过查看浏览器F12中的网络，可以发现，其实是获取access token时，报了403错误，即： Gitalk是通过代理的方式获取token，现在说明这个https://cors-anywhere.herokuapp.com代理不行，所以得换一个代理。 3、解决办法在网上找到代理https://cors.bridged.cc,是可以用的，所以更换一下配置，配置proxy，即： 1proxy: 'https://cors.bridged.cc/https://github.com/login/oauth/access_token' 重新部署一下即可。","link":"/2021/04/12/gitalk-error-code-403/"},{"title":"Go类型转换错误Cannot convert an expression of the type &#39;interface{}&#39; to the type &#39;XXX&#39;","text":"1、问题引出在编码中经常会涉及到类型转换的问题，在Go语言中也是一样的，一次在开发中将interface{}类型强制转换成具体类型时，出现了如下错误： 1Cannot convert an expression of the type 'interface{}' to the type 'Person' 为了引出该问题，在此先引入3个结构体，即： 1234567891011121314151617// Person结构体type Person struct { Name string Age int}// Student结构体type Student struct { Name string Age int}// Obj结构体type Obj struct { ID int Type interface{}} 创建一个person对象和obj对象： 123456789person := Person{ Name: &quot;lzj&quot;, Age: 20,}obj := Obj{ ID: 1, Type: person,} 由于Student结构体与Person结构体中的字段和类型都是一样的，其实是可以将person对象强制转换成student对象的，即： 12student := Student(person)fmt.Printf(&quot;Student: Name: %v, Age: %v\\n&quot;, student.Name, student.Age) 这里是可以成功的，而且输出结果为： 1Student: Name: lzj, Age: 20 如果将obj对象中的Type属性值转换Person结构体对象，也是按照以上的这种强制转换的话，就会有问题，即： 12p := Person(obj.Type)// 该代码会报错：Cannot convert an expression of the type 'interface{}' to the type 'Person' 2、解决办法interface{}转换成其它类型，所用的方式为： 1结果 := interface类型.(转换的类型) 所以上述的转换需要改成： 12p := obj.Type.(Person)fmt.Printf(&quot;Person: Name: %v, Age: %v\\n&quot;, p.Name, p.Age) 这样就可以转换成功，并输入结果为： 1Person: Name: lzj, Age: 20","link":"/2021/04/17/go-convert-type-error/"}],"tags":[{"name":"Gitalk","slug":"Gitalk","link":"/tags/Gitalk/"},{"name":"Go","slug":"Go","link":"/tags/Go/"}],"categories":[{"name":"问题解答库","slug":"问题解答库","link":"/categories/%E9%97%AE%E9%A2%98%E8%A7%A3%E7%AD%94%E5%BA%93/"}]}